name: CI/CD Pipeline

on:
  push:
      branches:
          - main
          - dev
  pull_request:
      branches:
          - main
          - dev

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
            - 5432:5432

      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: ${{ secrets.RABBITMQ_USER }}
          RABBITMQ_DEFAULT_PASS: ${{ secrets.RABBITMQ_PASSWORD }}
        ports:
          - 5672:5672
          - 15672:15672
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: 'pip'

      - name: Create test environment files
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > backend/.env.test
          echo "POSTGRES_HOST=localhost" >> backend/.env.test
          echo "POSTGRES_PORT=5432" >> backend/.env.test
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> backend/.env.test
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> backend/.env.test
          echo "POSTGRES_NAME=${{ secrets.POSTGRES_DB }}" >> backend/.env.test
          echo "DB_ECHO_LOG=False" >> backend/.env.test
          echo "CELERY_BROKER_URL=pyamqp://${{ secrets.RABBITMQ_USER }}@localhost//" >> backend/.env.test
          echo "CELERY_RESULT_BACKEND=rpc://" >> backend/.env.test
          echo "HH_API_URL=https://api.hh.ru/vacancies/" >> backend/.env.test
          echo "DEFAULT_USERNAME=test_admin" >> backend/.env.test
          echo "DEFAULT_PASSWORD=test_password" >> backend/.env.test

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov flake8
      
      - name: Lint with flake8
        run: |
          flake8 backend --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run backend tests with coverage
        env:
          ENV_FILE: backend/.env.test
        run: |
          if [ -d "backend/tests" ]; then
            cd backend
            pytest tests --cov=backend --cov-report=xml
          else
            echo "No tests found in backend/tests, skipping backend tests"
            echo "Creating empty coverage report"
            touch coverage.xml
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with: 
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Lint frontend code
        run: |
          cd frontend
          if grep -q "\"lint\":" package.json; then
            npm run lint
          else
            echo "No lint script found in package.json, skipping frontend linting"
          fi
      
      - name: Run frontend tests
        run: |
          cd frontend
          if [ -d "src/__tests__" ] || [ -d "src/tests" ] || grep -q "\"test\":" package.json; then
            npm test -- --ci --coverage
          else
            echo "No tests found in frontend, skipping frontend tests"
          fi
        continue-on-error: true # надо доделать

      - name: Clean up test environment files
        if: always()
        run: |
          rm -f backend/.env.test

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Build with Docker Compose
        run: |
            docker compose -f docker-compose.yml build

  # deploy:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.10'

  #     - name: Install Ansible
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install ansible
      
  #     - name: Set up SSH key   
  #       run: |
  #         mkdir -p ~/.ssh
  #         echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
  #         chmod 600 ~/.ssh/id_rsa
  #         ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

  #     - name: Create Ansible Inventory
  #       run: |
  #         echo "[production]" > inventory.ini
  #         echo "${{ secrets.DEPLOY_HOST }} ansible_user=${{ secrets.DEPLOY_USER }}" >> inventory.ini
          
  #     - name: Run Ansible playbook
  #       run: |
  #         ansible-playbook -i inventory.ini deploy.yml --extra-vars "@vars.yml"
  #1
